name: Build multiplateforme

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build:
    name: Compilation sur ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    timeout-minutes: 25

    steps:
      - name: Checkout du dépôt
        uses: actions/checkout@v4

      # Linux : installer dépendances système
      - name: Installer les dépendances Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxcb-xkb-dev

      # Vérification des dépendances : bash
      - name: Vérification des dépendances (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "Vérification des outils requis..."
          for cmd in cmake ninja ctest; do
            if ! command -v $cmd &> /dev/null; then
              echo "❌ $cmd est manquant"
              exit 1
            fi
            echo "✅ $cmd trouvé"
          done

      # Vérification des dépendances : PowerShell Windows
      - name: Vérification des dépendances (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $tools = @("cmake", "ninja", "ctest")
          foreach ($cmd in $tools) {
            if (-not (Get-Command $cmd -ErrorAction SilentlyContinue)) {
              Write-Host "❌ $cmd est manquant"
              exit 1
            } else {
              Write-Host "✅ $cmd trouvé"
            }
          }

      # Installation de Qt (Linux et macOS uniquement)
      - name: Installer Qt via install-qt-action (Linux/macOS)
        if: runner.os != 'Windows'
        uses: jurplel/install-qt-action@v3
        with:
          version: 6.8.3
          modules: "qtbase qtdeclarative qtquickcontrols2"
          cache: true
          retries: 3

      # Configuration CMake
      - name: Configurer le projet
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release

      # Compilation
      - name: Compiler le projet
        run: cmake --build build --parallel

      # Tests
      - name: Exécuter les tests
        run: ctest --test-dir build --output-on-failure --parallel $(nproc || 2)
