name: CMake
run-name: Build with cmake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release
  QT_VERSION: 6.8.3
  ARCGIS_VERSION: 200.7

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  First-job:
    name: First Job
    runs-on: ubuntu-latest
    steps:
      - run: echo "First job"

  Build:
    name: Build (Desktop)
    needs: [First-job]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Ninja (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt install ninja-build

      - name: Install Ninja (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install ninja

      - name: Install Ninja (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install ninja

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: '${{ env.QT_VERSION }}'

      - name: Setup MSVC (Windows)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure CMake
        run: |
          cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

      - name: Build
        run: |
          cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }}

      - name: Run tests
        working-directory: ${{ github.workspace }}/build
        run: |
          ctest -C ${{ env.BUILD_TYPE }}

  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Install Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept Android licenses
        run: yes | sdkmanager --licenses

      - name: Set execute permissions for Gradle wrapper
        run: chmod +x ./config/android/gradlew

      - name: Build APK with Gradle
        working-directory: ./config/android
        run: ./gradlew assembleDebug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: TestApp-android-apk
          path: config/android/app/build/outputs/apk/debug/*.apk

  build-ios:
    name: Build iOS App
    runs-on: macos-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Ninja
        run: brew install ninja

      - name: Install Qt for iOS
        uses: jurplel/install-qt-action@v4
        with:
          version: '${{ env.QT_VERSION }}'
          target: ios

      - name: Configure CMake for iOS
        run: |
          cmake -B build-ios \
                -DCMAKE_SYSTEM_NAME=iOS \
                -DCMAKE_OSX_SYSROOT=iphoneos \
                -DCMAKE_OSX_ARCHITECTURES=arm64 \
                -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
                -G Ninja

      - name: Build for iOS
        run: |
          cmake --build build-ios --config ${{ env.BUILD_TYPE }}

      - name: Archive iOS App
        run: |
          mkdir -p artifacts-ios
          cp -R build-ios/*.app artifacts-ios/

      - name: Upload iOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: TestApp-ios-app
          path: artifacts-ios/*.app

  build-wasm:
    name: Build WebAssembly (WASM)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Emscripten SDK manually
        run: |
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install 3.1.46
          ./emsdk activate 3.1.46

      - name: Install Qt for WASM
        uses: jurplel/install-qt-action@v4
        with:
          version: '${{ env.QT_VERSION }}'        

      - name: Configure CMake for WASM
        run: |
          source ./emsdk/emsdk_env.sh
          emcmake cmake -B build-wasm -DCMAKE_BUILD_TYPE=Release

      - name: Build with Emscripten
        run: |
          source ./emsdk/emsdk_env.sh
          cmake --build build-wasm

      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: TestApp-wasm
          path: build-wasm/*.html

  Last-job:
    name: Last Job
    runs-on: ubuntu-latest
    needs: [First-job, Build, build-android, build-ios, build-wasm]
    steps:
      - run: echo "✅ Tous les builds sont terminés avec succès"
