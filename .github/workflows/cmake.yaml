name: Build with CMake

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  BUILD_TYPE: Release
  QT_VERSION: 6.8.3

permissions:
  contents: write
  actions: read
  security-events: write

jobs:
  build-desktop:
    name: Build (Desktop)
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}

      - name: Configure CMake
        run: cmake -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

      - name: Build
        run: cmake --build build --config ${{ env.BUILD_TYPE }}

      - name: Run tests
        run: ctest --test-dir build

  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: "17"

      - name: Install Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept Android licenses
        run: yes | sdkmanager --licenses

      - name: Install Qt (Android)
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          target: android

      - name: Set execute permissions for Gradle wrapper
        run: chmod +x ./config/android/gradlew

      - name: Build APK with Gradle (debug mode)
        working-directory: ./config/android
        run: ./gradlew assembleDebug --info --stacktrace --no-daemon

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: TestApp-android-apk
          path: config/android/app/build/outputs/apk/debug/*.apk

  build-ios:
    name: Build iOS App
    runs-on: macos-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          target: ios

      - name: Configure CMake
        run: |
          cmake -B build-ios \
                -DCMAKE_SYSTEM_NAME=iOS \
                -DCMAKE_OSX_SYSROOT=iphoneos \
                -DCMAKE_OSX_ARCHITECTURES=arm64 \
                -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
                -G Ninja

      - name: Build
        run: cmake --build build-ios

      - name: Archive .app
        run: |
          mkdir -p ios-artifacts
          cp -R build-ios/*.app ios-artifacts/

      - name: Upload iOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: TestApp-ios-app
          path: ios-artifacts/*.app

  build-wasm:
    name: Build WebAssembly (WASM)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Emscripten SDK
        run: |
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install 3.1.46
          ./emsdk activate 3.1.46

      - name: Install Qt (WASM)
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}

      - name: Configure CMake with Emscripten
        run: |
          source ./emsdk/emsdk_env.sh
          emcmake cmake -B build-wasm -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

      - name: Build with Emscripten
        run: |
          source ./emsdk/emsdk_env.sh
          cmake --build build-wasm

      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: TestApp-wasm
          path: build-wasm/*.html

  finalize:
    name: Final Step
    needs: [build-desktop, build-android, build-ios, build-wasm]
    runs-on: ubuntu-latest
    steps:
      - run: echo "✅ Tous les builds multiplateformes sont terminés avec succès."
